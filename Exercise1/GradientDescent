function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
size(theta);
sum0=0;
sum1=0;
for i=1:m
    sum0=sum0+(X(i,:)*theta-y(i));
end;
temp0=theta(1)-(1/(m))*alpha*sum0;
for i=1:m
    sum1=sum1+(X(i,:)*theta-y(i))*X(i,2);
end;
temp1=theta(2)-(1/m)*alpha*sum1;
temp0
temp1
theta(1)=temp0;
theta(2)=temp1;
'the cost is'
%computeCost(X,y,theta);
'theta vector is'
theta






    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
